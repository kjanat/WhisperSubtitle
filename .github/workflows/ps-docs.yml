name: Documentation Generation

# Review gh actions docs if you want to further define triggers, paths, etc
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      test:
        description: "Skip deployment to GitHub Pages"
        type: boolean
        default: false
        required: false

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: ${{ (github.event_name == 'pull_request') && format('test-deploy-{0}', github.event.number) || (github.event_name == 'workflow_dispatch' && inputs.test) && 'test-deploy-manual' || 'deploy' }}
  cancel-in-progress: true

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:
      contents: read # to read the repository contents
      id-token: write # to verify the deployment originates from an appropriate source
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate docs
        uses: Microsoft/ps-docs@main
        with:
          inputPath: .            # Path to look for input files
          source: .ps-docs/       # Path containing document definitions
          outputPath: out         # Path to write documentation to
          path: .                 # Working directory for PSDocs
          prerelease: true        # Allow prerelease modules

      - name: Setup static site
        run: |
          # Create a proper HTML site structure
          mkdir -p site

          # Create index.html
          cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>WhisperSubtitle Documentation</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; line-height: 1.6; margin: 0; padding: 0; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                  .header { background: #2c3e50; color: white; padding: 2rem 0; margin-bottom: 2rem; }
                  .nav { background: #34495e; padding: 1rem 0; }
                  .nav ul { list-style: none; margin: 0; padding: 0; display: flex; justify-content: center; }
                  .nav li { margin: 0 1rem; }
                  .nav a { color: white; text-decoration: none; padding: 0.5rem 1rem; border-radius: 4px; }
                  .nav a:hover { background: #3498db; }
                  .content { background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  pre { background: #f8f9fa; padding: 1rem; border-radius: 4px; overflow-x: auto; }
                  code { background: #f8f9fa; padding: 0.2rem 0.4rem; border-radius: 3px; }
                  h1, h2, h3 { color: #2c3e50; }
                  .badge { background: #3498db; color: white; padding: 0.2rem 0.5rem; border-radius: 3px; font-size: 0.8rem; }
              </style>
          </head>
          <body>
              <div class="header">
                  <div class="container">
                      <h1>WhisperSubtitle</h1>
                      <p>Professional PowerShell module for generating subtitles using OpenAI Whisper</p>
                      <span class="badge">v1.0.0</span>
                  </div>
              </div>

              <div class="nav">
                  <div class="container">
                      <ul>
                          <li><a href="#overview">Overview</a></li>
                          <li><a href="#installation">Installation</a></li>
                          <li><a href="#functions">Functions</a></li>
                          <li><a href="#configuration">Configuration</a></li>
                          <li><a href="https://github.com/kjanat/WhisperSubtitle">GitHub</a></li>
                      </ul>
                  </div>
              </div>

              <div class="container">
                  <div class="content">
                      <div id="documentation-content">
                          <!-- Content will be loaded here -->
                      </div>
                  </div>
              </div>

              <script>
                  // Convert markdown to HTML and insert
                  fetch('./Module.md')
                      .then(response => response.text())
                      .then(markdown => {
                          // Simple markdown to HTML conversion
                          let html = markdown
                              .replace(/^# (.*$)/gim, '<h1 id="$1">$1</h1>')
                              .replace(/^## (.*$)/gim, '<h2 id="$1">$1</h2>')
                              .replace(/^### (.*$)/gim, '<h3 id="$1">$1</h3>')
                              .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
                              .replace(/\*(.*)\*/gim, '<em>$1</em>')
                              .replace(/```powershell\n([\s\S]*?)\n```/gim, '<pre><code class="language-powershell">$1</code></pre>')
                              .replace(/```\n([\s\S]*?)\n```/gim, '<pre><code>$1</code></pre>')
                              .replace(/`([^`]+)`/gim, '<code>$1</code>')
                              .replace(/^\- (.*$)/gim, '<li>$1</li>')
                              .replace(/\n\n/gim, '</p><p>')
                              .replace(/^([^<\n].*)$/gim, '<p>$1</p>');

                          // Wrap consecutive <li> elements in <ul>
                          html = html.replace(/(<li>.*<\/li>)/gims, '<ul>$1</ul>');

                          document.getElementById('documentation-content').innerHTML = html;
                      })
                      .catch(error => {
                          document.getElementById('documentation-content').innerHTML = '<p>Error loading documentation.</p>';
                      });
              </script>
          </body>
          </html>
          EOF

          # Copy markdown files
          cp out/*.md site/ 2>/dev/null || echo "No markdown files found"

          # Create a simple CSS file
          cat > site/styles.css << 'EOF'
          /* Additional styles can be added here */
          EOF

      - name: Upload docs to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    needs: generate
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || (github.event_name == 'workflow_dispatch' && !inputs.test)

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
