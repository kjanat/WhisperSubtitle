#!/bin/sh
# Commit message hook to enforce conventional commit format

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

commit_msg_file=$1
commit_msg=$(cat "$commit_msg_file")

# Conventional commit pattern
# type(scope): description
# 
# Valid types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert
pattern='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,100}$'

if echo "$commit_msg" | grep -qE "$pattern"; then
    echo "${GREEN}âœ“ Commit message follows conventional commit format${NC}"
    exit 0
else
    echo "${RED}Error: Commit message does not follow conventional commit format${NC}"
    echo ""
    echo "${YELLOW}Expected format:${NC}"
    echo "  type(scope): description"
    echo ""
    echo "${YELLOW}Valid types:${NC}"
    echo "  feat     - New feature"
    echo "  fix      - Bug fix"
    echo "  docs     - Documentation changes"
    echo "  style    - Code style changes (formatting, etc.)"
    echo "  refactor - Code refactoring"
    echo "  test     - Adding or updating tests"
    echo "  chore    - Maintenance tasks"
    echo "  perf     - Performance improvements"
    echo "  ci       - CI/CD changes"
    echo "  build    - Build system changes"
    echo "  revert   - Revert previous commit"
    echo ""
    echo "${YELLOW}Examples:${NC}"
    echo "  feat: add subtitle format conversion"
    echo "  fix(logging): resolve null reference in error handler"
    echo "  docs: update API reference for new parameters"
    echo ""
    echo "${RED}Your commit message:${NC}"
    echo "  $commit_msg"
    exit 1
fi